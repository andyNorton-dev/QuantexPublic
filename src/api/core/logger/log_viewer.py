import streamlit as st
import pandas as pd
from pathlib import Path

def start_viewer():
    st.set_page_config(page_title="–õ–æ–≥-—Ñ–∞–π–ª—ã", layout="wide")

    log_dir = Path(__file__).resolve().parent.parent / "loger/logs"
    log_file = log_dir / "debug.log"

    def load_logs():
        log_data = []
        if log_file.exists():
            with log_file.open("r", encoding="utf-8") as f:
                for line in f:
                    parts = line.strip().split(" - ", maxsplit=4)

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —á–∞—Å—Ç–µ–π, –Ω–µ —Ä–∞–≤–Ω—ã–º 5
                    if len(parts) == 5:
                        timestamp, logger, level, message, location = parts

                        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        if "access_token" in message or "token" in message:
                            message = "[TOKEN REDACTED]"

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ SQL
                        if "OperationalError" in message:
                            message = "[SQL ERROR REDACTED]"

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                        if "validation errors" in message:
                            message = "[VALIDATION ERROR REDACTED]"

                        log_data.append([timestamp, level, message, location])
                    else:
                        st.warning(f"–°—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É: {line}")
        else:
            st.warning(f"–§–∞–π–ª {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return pd.DataFrame(log_data, columns=["–î–∞—Ç–∞", "–£—Ä–æ–≤–µ–Ω—å", "–°–æ–æ–±—â–µ–Ω–∏–µ", "–§–∞–π–ª"])

    df = load_logs()

    if df.empty:
        st.info("–õ–æ–≥–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç.")
    else:
        st.write("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        st.write(df.head())  # –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

    st.title("–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ üìú")

    log_levels = df["–£—Ä–æ–≤–µ–Ω—å"].unique().tolist() if not df.empty else []
    selected_levels = st.multiselect("–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é:", log_levels, default=log_levels)

    filtered_df = df[df["–£—Ä–æ–≤–µ–Ω—å"].isin(selected_levels)] if not df.empty else pd.DataFrame()

    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞)
    def highlight_level(val):
        if val == 'CRITICAL':
            return 'color: purple'
        elif val == 'ERROR':
            return 'color: red'
        elif val == 'WARNING':
            return 'color: orange'
        elif val == 'INFO':
            return 'color: green'
        elif val == 'DEBUG':
            return 'color: white'
        return ''

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —Å—Ç–æ–ª–±—Ü—É "–£—Ä–æ–≤–µ–Ω—å"
    if not filtered_df.empty:
        styled_df = filtered_df.style.applymap(highlight_level, subset=["–£—Ä–æ–≤–µ–Ω—å"])

        st.dataframe(styled_df, height=600)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.")

    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"):
        st.cache_data.clear()  # –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
        st.info("–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–∂–º–∏—Ç–µ F5 –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ä—É—á–Ω—É—é.")

if __name__ == "__main__":
    start_viewer()
